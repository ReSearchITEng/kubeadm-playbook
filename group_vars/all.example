# global variables

#####
## PROXY
## proxy environment variable, mainly for fetching addons
#proxy_env:
#  http_proxy: 'http://proxy.corp.example.com:8080'
#  https_proxy: 'http://proxy.corp.example.com:8080'
#  no_proxy: 'localhost,127.0.0.1,.example.com,/var/run/docker.sock,.sock,.svc,.cluster.local,.local'
#####

#####
## PACKAGES (rpm/deb)
## Desired state for the yum packages (docker, kube*); it defaults to latest, trying to upgrade every time.
## package_state: latest # Other valid options for this context: installed
package_state: installed
## kube* requires full_kube_reinstallation set to True! (due to ansible (pre 2.4), which does not downgrade packages, you need to uninstalling first)
kubeadm_version: 1.9.* # 1.6.* # 1.8.*
kubelet_version: 1.9.* # 1.6.* # 1.8.*
kubectl_version: 1.9.* # 1.6.* # 1.8.*
# To find the possible versions, check: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/filelists.xml
# curl -SL https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/filelists.xml | grep -A 1 'name="kubeadm' | grep ver
# curl -SL https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/filelists.xml | grep -A 1 'name="kubelet' | grep ver
# curl -SL https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/filelists.xml | grep -A 1 'name="kubectl' | grep ver
#####
##### NOTE ->> For the actual k8s version, please set the below: kubeadm_master_config.kubernetesVersion

## When defined, it first forces uninstall any kube* packages (rpm/deb) from hosts
## When full_kube_reinstall is False or undefined, it will not reinstall # and it won't remove the /etc/kubernetes/ folder before reinstall
## Should be used only if a downgrade in kube* tools is required, otherwise it will waste a lot of time reinstalling unnecessary.
full_kube_reinstall: True #Default is True. #Make it False for faster redeployments (when for sure there is no need for downgrade)
etcd_clean: True # default is True, and it will cleanup /var/lib/etcd/ !
#####

kubeadm_init_args: "" # If needed: "--ignore-preflight-check-errors=all" #"--skip-preflight-checks" -> for pre 1.8
kubeadm_join_args: "--discovery-token-unsafe-skip-ca-verification" # 1.8 and above
turn_swapoff: True #false # default true # Important for 1.8+

#####
## NTP SETUP
## it is mandatory to have the time from all machines in sync
ntp_setup: True  # Default True
## ntp does not work via proxy, so, if ntp cannot reach external servers, define here the internal ntp server:
#ntp_conf: |
#  server pool.ntp.org
#####

#####
## hostname fix: set_hostname_to_inventory_hostname
## to make sure the hostname in inventory (usually fqdn) is in sync with the hostname as seen inside the host (usually required by vangrant)
set_hostname_to_inventory_hostname: False # Default False
#####

#####
## Selinux -> currently kube* does not fully support SELinux. It's usually recommended to disable or use permissive.
#selinux_state: disabled  # selinux_state: permissive ## By default it will try to switch to permissive
#selinux_policy: targeted   # selinux_policy: targeted  ## By default it will try to switch to targeted 
#####

#####
## Allow restart of machine (node) (if required, e.g. if ansible's selinux module sets reboot_required to true )
# allow_restart: True # Default False
#####

#####
## Iptables
iptables_setup: True # Default is True. It will disable&mask firewalld service (if exists), set default policies ACCEPT, and it will remove REJECT rules from all chains (INPUT,FW,OUT) with a commands like: iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited (for each). 
# If still issues, debug iptables on both master and nodes with: 
# watch -n1 iptables -vnL
# http://www.slsmk.com/how-to-log-iptables-dropped-packets-to-syslog/ and monitor with journalctl -kf
### # iptables_reset: False # False is default # Rarely used, this will be removed in the future
#####

#####
docker_setup: "auto" # when not defined, default is "auto"
  ## auto will install docker (if not yet installed), set it up (with overlay2 storage driver), (re)start it
  ## force will do the above even if it's already installed
  ## ignore will not check docker at all.
#####

#####
pre_pull_k8s_images: True
#pre_pull_k8s_images: False
#####

## ensure you have the DNS set for wildcard, and pointing all the trafic to master or similar setup
custom:
  networking:
    dnsDomain: "demo1.k8s.corp.example.com"
    
#####
# reset_gracefully: False # False is default # Important if there was a cluster before and you want to shut it down using cordon and drain
#####

#####
## This is the configuration that will be used by kubeadm init on master.
## Structure comes from: https://kubernetes.io/docs/admin/kubeadm/#config-file
kubeadm_master_config:
  apiVersion: kubeadm.k8s.io/v1alpha1
  kind: MasterConfiguration
  api:
#    advertiseAddress: <address|string>
#    advertiseAddress: '10x.x...x' # Usually required when working with vagrant, as the default (eth0) address is the NAT...
#    bindPort: <int>     # Defaults to 6443
#  etcd:
#    endpoints:
#    - <endpoint1|string>
#    - <endpoint2|string>
#    caFile: <path|string>
#    certFile: <path|string>
#    keyFile: <path|string>
#    dataDir: <path|string>
#    extraArgs:
#      <argument>: <value|string>
#      <argument>: <value|string>
#    image: <string>
  networking:
#    dnsDomain: "k8s1.cluster.local"  ## default is: "cluster.local"
#    serviceSubnet: <cidr>
    podSubnet: '10.244.0.0/16'  # Exactly this one is required when Flannel network is used. If you other network solutions, commented out this entry.
    #podSubnet: '192.168.0.0/16'  # Exactly this one is required when Calico network is used. If you other network solutions, this entry can be commented out.
    #podSubnet: '10.32.0.0/12'  # Exactly this one is required when Weave network is used (with defaults). If you other network solutions, this entry can be commented out.
  kubernetesVersion: 'v1.9.3' # If not defined, it will require internet access to find which is the latest one. kubeadm version has to be at least the requested k8s version.
                               # 1.7.12 # 1.6.12 # 1.8.8
#  cloudProvider: 'vsphere' # this is also required: govc vm.change -e="disk.enableUUID=1" -vm=<machines> and requires setup of cloud_config below
#  nodeName: <string>
#  authorizationModes:
#  - <authorizationMode1|string>
#  - <authorizationMode2|string>
  token: secret.token4yourbyok8s
#  tokenTTL: <time duration>
#  selfHosted: <bool>
  apiServerExtraArgs: # https://kubernetes.io/docs/admin/kube-apiserver/
    service-node-port-range: '79-32767' #Default 32000-32767 ; Ensure the local ports on all nodes are set accordingly
  #  runtime-config: batch/v2alpha1  # Required if one wants to use batch jobs before 1.8
#    <argument>: <value|string>
#    kubelet-preferred-address-types: 'Hostname' #,ExternalIP,InternalIP'
#  controllerManagerExtraArgs: # https://kubernetes.io/docs/admin/kube-controller-manager/
#    pod-eviction-timeout: '3m00s' # Default 5m0s #PodEvictionTimeout controls grace peroid for deleting pods on failed nodes.  Takes time duration string (e.g. '300ms' or '2m30s').  Valid time units are 'ns', 'us', 'ms', 's', 'm', 'h'.
#    <argument>: <value|string>
#  schedulerExtraArgs:
#    <argument>: <value|string>
#    <argument>: <value|string>
#  apiServerCertSANs:
#     - 'kubernetes'
#    - <name1|string>
#    - <name2|string>
#  certificatesDir: <string>
#  imageRepository: <string>
#  unifiedControlPlaneImage: <string>
#  featureGates:
#    <feature>: <bool>
#    <feature>: <bool>
#####
## TAINTS (for master) & uncordon
## NoExecute evicts on the spot. (while NoSchedule does not allow new pods); other option: PreferNoSchedule
## FYI, by default, master has this taint: node-role.kubernetes.io/master:NoSchedule
## If you want to be able to schedule pods on the master, either set master_uncordon:true  (prefered option) or via taints section: uncomment 'node-role.kubernetes.io/master:NoSchedule-'
## It's useful if it's a single-machine Kubernetes cluster for development (replacing minikube)
## To see taints, use: kubectl describe nodes

#taints_master:
#- 'dedicated=master:NoExecute'                 # Force eviction of pods from master
#- 'dedicated=master:PreferNoSchedule'          # Safety net
#- 'dedicated:NoExecute-'                       # Puts the previous PreferNoSchedule into action - step1
#- 'node-role.kubernetes.io/master:NoSchedule-' # Puts the previous PreferNoSchedule into action - step2

#master_uncordon: True     # This makes master like any other node. Mandatory for a single machine cluster (where master==node)
#####

#####
## NETWORK
## it's not possible to have more than one network solution
## options: https://kubernetes.io/docs/admin/addons/
k8s_network_addons_urls:
## CALICO # For Calico one has to also ensure above setting kubeadm_master_config.networking.podSubnet is set to 192.168.0.0/16 )
#   - https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/kubeadm/1.6/calico.yaml # versions are 2.4,2.5,2.6
#     newer calico 3.0 :     
#   - https://docs.projectcalico.org/v3.0/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml  
## OR Flanned: (for Flanned one has to also ensure above setting kubeadm_master_config.networking.podSubnet is set to 10.244.0.0/16 )
  - https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml # For latest, replace "v0.9.1" with "master"
# OR Weave: #https://www.weave.works/docs/net/latest/kubernetes/kube-addon/ 
# - https://cloud.weave.works/k8s/net?k8s-version={{kubeadm_master_config.kubernetesVersion}}&{{networking.podSubnet | default ('env.IPALLOC_RANGE=10.32.0.0/12') }}
#####

#####
# ADDONS # uncomment/ add the desired ones.
#k8s_addons_urls:
  # - https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
  # - https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/node-problem-detector/npd.yaml # rbac ready
  # - https://github.com/ReSearchITEng/kubeadm-playbook/raw/master/allow-all-all-rbac.yml    # For "working around RBAC", should some of your apps have temporary issues
#####

vsphere_storageclass_urls:
  - https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/storage-class/vsphere/default.yaml
  #- https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/vsphere/vsphere-volume-sc-fast.yaml

###################
## HELM & CHARTS ##
###################
helm:
  #helm_version: latest #v2.5.0 + #https://github.com/kubernetes/helm/releases
  install_script_url: 'https://github.com/kubernetes/helm/raw/master/scripts/get' 
  repos: ## stable repo is installed by helm by default, no need for its entry here, add only new ones
    - { name: incubator, url: 'http://storage.googleapis.com/kubernetes-charts-incubator' }
#    - { name: rook, url: 'http://charts.rook.io' }
#    - { name: fabric8, url: 'https://fabric8.io/helm' }
  packages_list: # when not defined, namespace defaults to "default" namespace
    - { name: nginx-ingress, repo: stable/nginx-ingress, namespace: kube-system, options: '--set rbac.create=true --set controller.stats.enabled=true --set controller.service.type=NodePort --set controller.service.nodePorts.http=80 --set controller.service.nodePorts.https=443' } # RBAC ready
    - { name: heapster, repo: stable/heapster, namespace: kube-system, options: '--set service.nameOverride=heapster,rbac.create=true' }

## DASHBOARD HEAD(latest), compatible with k8s 1.8:
#    - { name: dashboard, repo: stable/kubernetes-dashboard, options: '--set rbac.create=True,ingress.enabled=True,ingress.hosts[0]={{groups["master"][0]}},image.repository=kubernetesdashboarddev/kubernetes-dashboard-amd64,image.tag=head,image.pullPolicy=Always' } # development version, for k8s 1.8, and with all admin permissions open
# OR:
## DASHBOARD 1.8.3, compatible with k8s 1.8+:    
    - { name: dashboard, repo: stable/kubernetes-dashboard, options: '--set rbac.create=True,ingress.enabled=True,ingress.hosts[0]={{groups["master"][0]}},ingress.hosts[1]=dashboard.{{ custom.networking.dnsDomain }},image.tag=v1.8.3' } # other vers: v1.6.3. All secure & stable prod version
    ##gcr.io/google_containers/kubernetes-dashboard-amd64 for stable versions tagged per k8s version. For lastest (beta) versions, one may use: from docker.io kubernetesdashboarddev/kubernetes-dashboard-amd64

#    - { name: influxdb, repo: stable/influx, namespace:kube-system, options: '--set --set persistence.enabled=True' }
#    - { name: prometheus, repo: stable/prometheus, namespace:kube-system, options: '--set alertmanager.ingress.enabled=True,alertmanager.ingress.hosts[0]=alertmanager.{{custom.networking.dnsDomain}},server.ingress.enabled=True,server.ingress.hosts[0]=prometheus.{{custom.networking.dnsDomain}}'
#    - { name: moodle, repo: stable/moodle, options: '--set moodleUsername=admin,moodlePassword=password,mariadb.mariadbRootPassword=secretpassword,serviceType=ClusterIP' }

## Not tested:
#    - { name: elasticsearch, repo: incubator/elasticsearch }
#####


##################  STORAGE  ################
#############################################

## When reseting a previous instalaltion, should it first remove the exsting pvcs&pvs (default false)?
storage:
  delete_pvs: true

##### STORAGE OPTION: Self Created NFS ###
##########################################
## Creates a nfs server on the master and exports the below path from the master to all cluster
nfs_k8s: #https://github.com/kubernetes/kubernetes/blob/master/examples/volumes/nfs/provisioner/nfs-server-gce-pv.yaml
         #https://github.com/kubernetes-incubator/nfs-provisioner
  #enabled: "true"
  enabled: False
  provisioner: nfs.k8s
  # Path on the master node:
  host_path: /storage/nfs
  is_default_class: 'true' # case sensitive! Also: only one class can be default. Note that vpshere thin is also trying to be set as default, choose which one you want as default
  wipe: true # When set to true, every reset the files under host_path will be wiped !!!

##### STORAGE OPTION: Rook (ceph) ########
##########################################
## Rook - Ceph Distributed Software Storage
## As per spec section of: https://github.com/rook/rook/blob/master/demo/kubernetes/rook-cluster.yaml
rook:
  enabled: false
  os_packages:
  - jq
  reset:
    storage_delete: true
  ## OLD Installation type, using url. Now we use the helm chart which wraps it.
  #operator_url:
  #  https://github.com/rook/rook/raw/master/demo/kubernetes/rook-operator.yaml
  client_tools_url:
  - https://github.com/rook/rook/raw/master/demo/kubernetes/rook-client.yaml
  - https://github.com/rook/rook/raw/master/demo/kubernetes/rook-tools.yaml
  sharedfs:
    enabled: false
    fs:
    - { name: "sharedfs", replication: 2 } #ceph osd pool set sharedfs-data size 2 && ceph osd pool set sharedfs-metadata size 2
  allowed_consumer_namespaces:  #E.g.: kubectl get secret rook-admin -n rook -o json | jq '.metadata.namespace = "kube-system"' | kubectl apply -f - # as per: https://github.com/rook/rook/blob/master/Documentation/k8s-filesystem.md
  - "kube-system"
  - "default"
  cluster_spec: # as per: https://github.com/rook/rook/blob/master/demo/kubernetes/rook-cluster.yaml and https://github.com/rook/rook/blob/master/Documentation/cluster-tpr.md
    versionTag: master-latest
    dataDirHostPath: /storage/rook
    storage:                # cluster level storage configuration and selection
      useAllNodes: true
      useAllDevices: false
      deviceFilter:
      metadataDevice:
      location:
      storeConfig:
        storeType: filestore
        databaseSizeMB: 1024 # this value can be removed for environments with normal sized disks (100 GB or larger)
        journalSizeMB: 1024  # this value can be removed for environments with normal sized disks (20 GB or larger)
  ## Individual nodes and their config can be specified as well, but 'useAllNodes' above must be set to false. Then, only the named
  ## nodes below will be used as storage resources.  Each node's 'name' field should match their 'kubernetes.io/hostname' label.
  #    nodes:
  #    - name: "172.17.4.101"
  #     directories:         # specific directores to use for storage can be specified for each node
  #     - path: "/rook/storage-dir"
  #   - name: "172.17.4.201"
  #     devices:             # specific devices to use for storage can be specified for each node
  #     - name: "sdb"
  #     - name: "sdc"
  #     storeConfig:         # configuration can be specified at the node level which overrides the cluster level config
  #       storeType: bluestore
  #   - name: "172.17.4.301"
  #     deviceFilter: "^sd."

## ADVANCED rook options:
  rbd:
    enabled: true
    pool_spec: # as per: https://github.com/rook/rook/blob/master/demo/kubernetes/rook-storageclass.yaml and https://github.com/rook/rook/blob/master/Documentation/pool-tpr.md
      replication:
        size: 1
      ## For an erasure-coded pool, comment out the replication size above and uncomment the following settings.
      ## Make sure you have enough OSDs to support the replica size or erasure code chunks.
      #erasureCode:
      #  codingChunks: 2
      #  dataChunks: 2

    storageclass_parameters: # as per: https://github.com/rook/rook/blob/master/demo/kubernetes/rook-storageclass.yaml
      pool: replicapool
      ## Specify the Rook cluster from which to create volumes. If not specified, it will use `rook` as the namespace and name of the cluster.
      # clusterName: rook
      # clusterNamespace: rook

  ##ceph_conf: as per https://github.com/rook/rook/blob/master/Documentation/advanced-configuration.md
  #ceph_conf: |
  #  [global]
  #  osd crush update on start = false
  #  osd pool default size = 2

  monitoring: # as per: https://github.com/rook/rook/blob/master/Documentation/k8s-monitoring.md
    enabled: true

#####

##### STORAGE OPTION: VMWARE VSPHERE Storage #
##############################################
##### Note: This requires the cloud provider setting above:
##### kubeadm_master_config.cloudProvider: 'vsphere'
#####
cloud_config: |
    ## Vsphere:
    ## One must ensure:
    ##	- all vms have this enabled: ./govc vm.change -e="disk.enableUUID=1" -vm=<machine1-x>
    ##  - all vms are in the same VCenter
    ##  - the user below has the following roles at vcenter level:
    ## Datastore > Allocate space
    ## Datastore > Low level file Operations
    ## Virtual Machine > Configuration > Add existing disk
    ## Virtual Machine > Configuration > Add or remove device
    ## Virtual Machine > Configuration > Remove disk
    ## Virtual machine > Configuration > Add new disk
    ## Virtual Machine > Inventory > Create new
    ## Network > Assign network
    ## Resource > Assign virtual machine to resource pool
    ## Profile-driven storage -> Profile-driven storage view
    [Global]
      user = user@corp.example.com
      password = PASSWORD
      server = vcenter.corp.example.com:443
      insecure-flag = 1
      datacenter = DC01
      datastore = DS01
      ##./govc vm.info -vm.dns=machine01 | grep Path #and remove the machine name (last string)
      ## Working dir is necessary when your machines are under a directory (and all have to be under the same one)
      # working-dir = kubernetes

      ## Setup of per machine vm-uuid is usually not required, and it's determined automatically.
      #cat /sys/class/dmi/id/product_serial   and format like: "4237558d-2231-78b9-e07e-e9028e7cf4a5"
      #or: ./govc vm.info -vm.dns=machine01 | grep UUID #(well formated also)
      #machine01: vm-uuid="4215e1de-26df-21ec-c79e-2105fe3f9ad1"
      #machine02: vm-uuid="4215f1e4-6abd-cff1-1a4c-71ec169d7b11"
      #machine03: vm-uuid="4215fbc5-0851-4255-9fb7-a1f7e31ae716"
      #machine04: vm-uuid="42151a5f-f227-e888-7d73-e148de927888"
    [Disk]
      #scsicontrollertype = lsilogic-sas
      scsicontrollertype = pvscsi

#####

########## VARIOUS GENERIC SETTINGS #####
## This will be removed in the future versions
# kubeadm_docker_insecure_registry: registry.example.com:5000
#####

#####
# VARIOUS
# shell for bash-completion for kubeadm and kubectl; currently only bash is fully supported, others only partially.
shell: 'bash'
#####

