---
- name: extract the token from the master role  execution and set kubeadm_token
  set_fact: kubeadm_token="{{hostvars[groups['master'][0]]['kubeadm_token_whash'].stdout_lines[0]}}"
  when:
  - kubeadm_master_config.bootstrapTokens[0].token is not defined

- name: extract the token hash from the master role  execution and set kubeadm_token_hash
  set_fact: kubeadm_token_hash="{{hostvars[groups['master'][0]]['kubeadm_token_whash'].stdout_lines[1]}}"
  when:
  - kubeadm_master_config.bootstrapTokens[0].token is not defined

- name: set kubeadm_token to the value from kubeadm_master_config
  set_fact: kubeadm_token={{ kubeadm_master_config.bootstrapTokens[0].token }}
  when:
  - kubeadm_master_config.bootstrapTokens is defined
  - kubeadm_master_config.bootstrapTokens[0].token is defined

- name: set kubeadm_token to the value from kubeadm_master_config
  set_fact: kubeadm_token={{ kubeadm_master_config.bootstrapTokens[0].token }}
  when:
  - kubeadm_master_config.bootstrapTokens is defined
  - kubeadm_master_config.bootstrapTokens[0].token is defined

# - name: when there is none defined, set a dummy value for kubeadm_token_hash
#   set_fact: kubeadm_token_hash="sha256:0000000000000000000000000000000000000000000000000000000000000000"
#   when:
#   - kubeadm_master_config.bootstrapTokens[0].token is defined

- name: when there is no discovery token hash, make sure kubeadm_join_args has "--discovery-token-unsafe-skip-ca-verification"
  set_fact: kubeadm_join_args="{{ kubeadm_join_args | default (" ") }} --discovery-token-unsafe-skip-ca-verification"
  when:
  - kubeadm_master_config.bootstrapTokens[0].token is defined

- name: when there is discovery token hash, add to kubeadm_join_args  "--discovery-token-ca-cert-hash and the hash"
  set_fact: kubeadm_join_args="{{ kubeadm_join_args | default (" ") }} --discovery-token-ca-cert-hash  {{ kubeadm_token_hash }}"
  when:
  - kubeadm_master_config.bootstrapTokens[0].token is not defined

- name: token to be used is
  debug: var=kubeadm_token

- name: add api section to the kubeadm_master_config (if does not exist)
  set_fact:
    kubeadm_master_config: "{{ kubeadm_master_config | combine ( { 'api': kubeadm_master_config.api | default ({}) } ) }}"

## Decide how to approach the master: inventory or force fqdn (for non MasterHA cases); via VIP,MasterHA (for MasterHA cases)
- name: by default set master name to inventory definition (no MasterHA case)
  set_fact: master_name={{ groups['master'][0] }}
  when:
  - not custom.networking.fqdn.always
  - not custom.networking.fqdn.master
  - groups['master'] | length == 1

- name: force use fqdn for master name (no MasterHA case)
  set_fact: master_name={{ hostvars[groups['master'][0]]['ansible_fqdn'] }}
  when:
  - custom.networking.fqdn.always or custom.networking.fqdn.master
  - groups['master'] | length == 1

- name: force use fqdn for master name (MasterHA case)
  set_fact: master_name={{ custom.networking.masterha_fqdn }}
  when:
  - custom.networking.fqdn.always or custom.networking.fqdn.master
  - groups['master'] | length > 1

- name: force use vip for master name (MasterHA case)
  set_fact: master_name={{ custom.networking.masterha_vip }}
  when:
  - not custom.networking.fqdn.always
  - not custom.networking.fqdn.master
  - groups['master'] | length > 1

- name: "Wait 300 seconds for master at {{ master_name }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} to become open (MasterHA)"
  wait_for:
    port: "{{ kubeadm_master_config.api.bindPort | default (6443) }}"
    host: "{{ master_name }}"
    delay: 1
    timeout: 300

## Determine how to reffer to the nodes: using fqdn, or let k8s decide (based on how the machine answers on the hostname cmd)
- name: force use fqdn for node name setting during join; else, k8s will default to (hostname like the one provided by the hostname command on the node)
  set_fact: node_name_setting="--node-name {{ ansible_fqdn }}"
  when:
  - custom.networking.fqdn.always or custom.networking.fqdn.node

- name: Join cluster using kubeadm join {{ master_name }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} --token {{ kubeadm_token }} {{ kubeadm_join_args | default(" ") }}
  command: /usr/bin/kubeadm join {{ master_name }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} {{ node_name_setting | default (" ") }} --token {{ kubeadm_token }} {{ kubeadm_join_args | default(" ") }}
  tags:
  - init
#  args:
#  creates: /etc/kubernetes/kubelet.conf

- name: wait for /etc/kubernetes/kubelet.conf to be created
  wait_for:
    path: /etc/kubernetes/kubelet.conf
    state: present
    timeout: 30
    delay: 3
  changed_when: false
  tags:
  - init

#This is required when proxy is used, and the inventory_hostname is defined with fqdn
#to ensure the connection to local server is not going via proxy (expecially when applying addons)
- name: replace master api server address to {{ master_name }} in the /etc/kubernetes/kubelet.conf
  replace:
    dest: /etc/kubernetes/kubelet.conf
    regexp: '(\s+)(server: https:\/\/)[A-Za-z0-9\-\.]+:'
    replace: '\1\2{{ master_name }}:'
    #backup: yes
  #when: proxy_env is defined and master is defined with fqdn in the inventory file (e.g. master.example.com)
  tags:
  - init
  notify:
  - Restart kubelet

### SANITY : At this stage it will not be "Ready", as there is no network deployed yet.
# - block:
#   # At this stage it will not be "Ready", as there is no network deployed yet.
#   - name: kubectl get nodes
#     shell: "kubectl get nodes --no-headers | grep {{ inventory_hostname }}"   # | grep -v -w 'Ready' || true "
#     register: command_result
#     until: command_result.stdout != ""
#     retries: 40
#     delay: 3
#     changed_when: false

#   - name: Get nodes
#     command: kubectl get nodes
#     register: command_result
#     changed_when: false

#   - name: Display nodes
#     debug:
#       var: command_result.stdout_lines
#     changed_when: false

#   - name: Check all nodes were registered
#     shell: "/usr/bin/test $(kubectl get nodes --no-headers | grep -ow Ready | wc -l) >= {{ groups['node'] | length + groups['master'] | length }}"
#     register: command_result
#     retries: 10
#     delay: 3
#     until: command_result | success
#     changed_when: false

#   environment:
#     KUBECONFIG: /etc/kubernetes/kubelet.conf
#   tags:
#   - node
#   - node_sanity

###
- name: export KUBECONFIG in nodes' ~/.bash_profile
  lineinfile:
    dest: ~/.bash_profile
    line: "export KUBECONFIG=/etc/kubernetes/kubelet.conf"
    state: present
    create: yes
    regexp: '^export KUBECONFIG=.*'
  when: shell is undefined or shell == 'bash'
