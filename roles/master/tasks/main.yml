---
- set_fact:
    env_kc: '{{ proxy_env |default({}) | combine ({"KUBECONFIG" :"/etc/kubernetes/admin.conf"}) }}'

- name: Pull images
  command: /usr/bin/docker pull "{{ item }}:{{ kubernetes_version | default ('latest') }}"
  with_items:
  - "gcr.io/google_containers/kube-proxy-amd64"
  - "gcr.io/google_containers/kube-controller-manager-amd64"
  - "gcr.io/google_containers/kube-apiserver-amd64"
  - "gcr.io/google_containers/kube-scheduler-amd64"
  tags:
  - prepull_images
  register: command_result
  changed_when: '"Image is up to date" not in command_result.stdout'
  when: full_kube_reinstall is defined

- name: Generate cluster token
  command: /usr/bin/kubeadm token generate
  register: kubeadm_token_generate
  when: kubeadm_token is not defined
  tags: 
  - init

- set_fact: kubeadm_token={{ kubeadm_token_generate.stdout }}
  when: kubeadm_token is not defined
  tags:
  - init

#TODO: It will need adjustments on ansible_play_hosts when kubeadm will support master HA #{{ ansible_play_hosts }}
- name: Initialize cluster with apiserver-advertise-address {{kubeadm_init_apiserver_advertise_address}}
  command: /usr/bin/kubeadm init --token {{ kubeadm_token }} --kubernetes-version {{ kubernetes_version | default ('latest') }} {{ kubeadm_init_extra_params | default('') }} --apiserver-advertise-address {{ kubeadm_init_apiserver_advertise_address }} --apiserver-cert-extra-sans {{ inventory_hostname }},{{ inventory_hostname_short }},{{ apiserver_cert_extra_sans | default('kubernetes') }} --service-dns-domain {{ service_dns_domain | default('cluster.local') }}
  tags:
  - init
  when: kubeadm_init_apiserver_advertise_address is defined

- name: Initialize cluster without special apiserver-advertise-address
  command: /usr/bin/kubeadm init --token {{ kubeadm_token }} --kubernetes-version {{ kubernetes_version | default ('latest') }} {{ kubeadm_init_extra_params | default('') }} --apiserver-advertise-address {{ inventory_hostname }},{{ inventory_hostname_short }} --apiserver-cert-extra-sans {{ inventory_hostname }},{{ inventory_hostname_short }},{{ apiserver_cert_extra_sans | default('kubernetes') }} --service-dns-domain {{ service_dns_domain | default('cluster.local') }}
  tags:
  - init
  when: kubeadm_init_apiserver_advertise_address is not defined and proxy_env is defined

- name: Initialize cluster without special apiserver-advertise-address
  command: /usr/bin/kubeadm init --token {{ kubeadm_token }} --kubernetes-version {{ kubernetes_version | default ('latest') }} {{ kubeadm_init_extra_params | default('') }} --apiserver-cert-extra-sans {{ inventory_hostname }},{{ inventory_hostname_short }},{{ apiserver_cert_extra_sans | default('kubernetes') }} --service-dns-domain {{ service_dns_domain | default('cluster.local') }}
  tags:
  - init
  when: kubeadm_init_apiserver_advertise_address is not defined and proxy_env is not defined

#This is required when proxy is used, and the inventory_hostname is defined with fqdn
#to ensure the connection to local server is not going via proxy (expecially when applying addons)
- replace:
    dest: '{{ item }}'
    regexp: '(\s+)(server: https:\/\/)[A-Za-z0-9\-\.]+:'
    replace: '\1\2{{ groups["master"][0] }}:'
    #backup: yes
  when: proxy_env is defined ### and master is defined with fqdn in the inventory file (e.g. master.example.com)
  with_items:
  - /etc/kubernetes/admin.conf
  - /etc/kubernetes/kubelet.conf
  #- /etc/kubernetes/controller-manager.conf
  #- /etc/kubernetes/scheduler.conf
  tags:
  - init
  notify:
  - Restart kubelet

- lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: "- kube-apiserver"
    line: "{{ item }}"
    #backup: yes
  with_items: "{{ kube_apiserver_extra_params | default ('') }}"
  when: kube_apiserver_extra_params is defined
  tags:
  - init
  notify: 
  - Restart kubelet

- name: export KUBECONFIG in master's ~/.bash_profile
  lineinfile: 
    dest: ~/.bash_profile
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    state: present
  when: shell is undefined or shell == 'bash'

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=10

- name: Forcing restart of services
  meta: flush_handlers

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=10

- name: Create cluster network
  command: /usr/bin/kubectl apply -f {{ item }}
  with_items: "{{ k8s_network_addons_urls | default ('') }}"
  environment: '{{env_kc}}'
  when: k8s_network_addons_urls is defined
  tags:
  - k8s_network_addons

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=10

- name: sanity - wait for alls pod to be running (important to ensure network is fine, see cni bugs)
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get --namespace kube-system pods | tail -n +2 | grep -v -w 'Running' |grep -v 'dns' || true "
  register: command_result
  tags:
  - k8s_network_addons
  - sanity
  until: command_result.stdout == ""
  retries: 40
  delay: 3

- name: use master as node also
  shell: 'kubectl taint nodes --all dedicated-'
  when: use_master_as_node_also | default(false)
  ignore_errors: yes

#- name: Wait 1 minute for images pulls and cluster services to start
#  pause: minutes=1

- name: Install k8s_addons_urls (with proxy)
  command: /usr/bin/kubectl apply -f {{ item }}
  with_items: "{{ k8s_addons_urls | default ('') }}"
  environment: '{{env_kc}}'
  when: k8s_addons_urls is defined
  tags:
   - k8s_addons

- name: prepare kubernetes-dashboard-ingress file
  template:
    src: kubernetes-dashboard-ingress.j2
    dest: /tmp/kubernetes-dashboard-ingress.yml
    #backup: yes
    force: yes
  when: k8s_addons_urls is defined
  tags:
  - k8s_addons

- name: create kubernetes-dashboard-ingress in k8s
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl create --namespace kube-system -f /tmp/kubernetes-dashboard-ingress.yml"
  when: k8s_addons_urls is defined
  tags:
  - k8s_addons

- name: sanity - wait for alls pod to be in Running status
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get --namespace kube-system pods | tail -n +2 | grep -v -w 'Running' || true "
  register: command_result
  tags:
  - k8s_addons
  - sanity
  until: command_result.stdout == ""
  retries: 20
  delay: 3



