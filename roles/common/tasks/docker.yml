---
- name: check docker hello world - test 1/2 # It will not work if there is no internet connection; change img as desired
  shell: docker run --rm -i hello-world # | awk '/Hello/ {print $1}'
  register: docker_result
  #failed_when: docker_result.stdout != "Hello"
  tags:
  - check_docker
  - docker
  changed_when: false
  ignore_errors: true

- block:
  - name: CentOS/RedHat docker install and setup
    block:
    - name: Install in CentOS/RHEL docker (if does not exist)
      package: state=present name={{ item }} #-{{version}}
      environment: '{{ proxy_env | default ({}) }}'
      with_items:
      - docker
      tags:
      - docker
      when: ansible_os_family == "RedHat"
      notify:
      - Restart docker

    - name: prepare docker-storage-setup (CentOS/RHEL)
      copy:
        content: |
          EXTRA_STORAGE_OPTIONS="--storage-opt overlay2.override_kernel_check=true"
          STORAGE_DRIVER="overlay2"
        dest: /etc/sysconfig/docker-storage-setup
        backup: yes
      run_once: yes
      tags:
      - docker
      when: ansible_os_family == "RedHat"
      notify:
      - Restart docker-storage-setup
      - Restart docker
      # CURRENTLY tested in CentOS/RHEL.

    - name: remove previous /etc/sysconfig/docker-storage (CentOS/RHEL)
      file:
        path: /etc/sysconfig/docker-storage
        state: absent
      tags:
      - docker
      notify:
      - Restart docker-storage-setup
      - Restart docker

    - name: Restart docker-storage-setup  (CentOS/RHEL)
      systemd: name=docker-storage-setup state=restarted
      tags:
      - docker
      notify:
      - Restart docker

    - name: set https proxy in docker (CentOS/RHEL)
      lineinfile:
        name: /etc/sysconfig/docker
        state: present
        line: "https_proxy={{proxy_env.https_proxy | default ('') }}"
      when:
      - proxy_env is defined
      - proxy_env.https_proxy is defined
      #- proxy_env.https_proxy | length > 0
      tags:
      - docker
      notify:
      - Restart docker

    - name: set http proxy in docker (CentOS/RHEL)
      lineinfile:
        name: /etc/sysconfig/docker
        state: present
        line: "http_proxy={{proxy_env.http_proxy | default ('') }}"
      when:
      - proxy_env is defined
      - proxy_env.http_proxy is defined
      #- proxy_env.http_proxy | length > 0
      tags:
      - docker
      notify:
      - Restart docker

    - name: set no_proxy in docker (CentOS/RHEL)
      lineinfile:
        name: /etc/sysconfig/docker
        state: present
        line: "no_proxy={{proxy_env.no_proxy | default ('') }}"
      when:
      - proxy_env is defined
      - proxy_env.no_proxy is defined
      #- proxy_env.no_proxy | length > 0
      tags:
      - docker
      notify:
      - Restart docker

    - name: Add docker insecure registry
      lineinfile:
        dest: /etc/sysconfig/docker
        regexp: '^# INSECURE_REGISTRY='
        line: "INSECURE_REGISTRY='--insecure-registry {{ kubeadm_docker_insecure_registry }}'"
      notify:
      - Restart docker
      when: kubeadm_docker_insecure_registry is defined

    when:
    - ansible_os_family == "RedHat"
    - old_docker
  ## Block for CentOS/RedHat ends here

  ### DEBIAN/Ubuntu:
  - name: Debian/Ubuntu (RH new) docker installation and docker_setup
    block:

    - name: Install in debian docker (if does not exist)
      package: state=present name={{ item }} #-{{version}}
      environment: '{{ proxy_env | default ({}) }}'
      with_items:
      - docker.io # this is ubuntu's official version. Stable and tested
      #- docker-engine  # this is the version from the docker project, not fully tested.
      tags:
      - docker
      when: ansible_os_family == "Debian"
      notify:
      - Restart docker

    - name: set docker storage to overlay2 (Debian / RH new) - overlay2 works only with ubuntu's official docker distribution (docker.io)
      copy:
        content: |
          {
            "storage-driver": "overlay2",
             "exec-opts": ["native.cgroupdriver=systemd"],
             "log-opts": {
                "max-size": "1000m",
                "max-file": "3"
             }
          }
        dest: /etc/docker/daemon.json
        backup: yes
      tags:
      - docker
      when: ansible_os_family == "Debian"
      notify:
      - Restart docker
      # also look at: /etc/default/docker

    - name: set https_proxy in docker (Debian / RH new)
      file:
        path: /etc/systemd/system/{{ item }}.service.d/
        state: directory
      when: proxy_env is defined # and  ansible_os_family == "Debian"
      with_items:
      - docker
      - crio
      - containerd
      tags:
      - docker

    - name: set https_proxy in docker (Debian/RH new) - section
      lineinfile:
        name: /etc/systemd/system/{{ item }}.service.d/http-proxy.conf
        state: present
        create: yes
        line: "[Service]"
      when: proxy_env is defined # and  ansible_os_family == "Debian"
      with_items:
      - docker
      - crio
      - containerd
      tags:
      - docker
      notify:
      - Restart docker
      - Restart containerd
      - Restart crio

    - name: set https_proxy in docker (Debian / RH new) - https
      lineinfile:
        name: /etc/systemd/system/{{ item }}.service.d/http-proxy.conf
        state: present
        line: 'Environment="https_proxy={{proxy_env.https_proxy | default ([]) }}"'
      when: proxy_env is defined and  ansible_os_family == "Debian"
      with_items:
      - docker
      #- crio
      #- containerd
      tags:
      - docker
      notify:
      - Restart docker
      - Restart containerd
      - Restart crio

    - name: set http_proxy in docker (Debian / RH new) - http
      lineinfile:
        name: /etc/systemd/system/{{ item }}.service.d/http-proxy.conf
        state: present
        line: 'Environment="http_proxy={{proxy_env.http_proxy | default ([]) }}"'
      when: proxy_env is defined and  ansible_os_family == "Debian"
      with_items:
      - docker
      #- crio
      #- containerd
      tags:
      - docker
      notify:
      - Restart docker
      - Restart containerd
      - Restart crio

    - name: set no_proxy in docker (Debian/RH new)
      lineinfile:
        name: /etc/systemd/system/{{ item }}.service.d/http-proxy.conf
        state: present
        line: 'Environment="no_proxy={{proxy_env.no_proxy | default ([]) }}"'
      when: proxy_env is defined
      with_items:
      - docker
      - crio
      - containerd
      tags:
      - docker
      notify:
      - Restart docker
      - Restart containerd
      - Restart crio

    # - name: Make sure containerd does not disable cri plugin
    #   lineinfile:
    #     dest: /etc/containerd/config.toml
    #     regexp: '^disabled_plugins = ["cri"]'
    #     line: "# disabled_plugins = ["cri"]"
    #   notify:
    #   - Restart containerd
    #   tags:
    #   - docker

    - name: "sanity - make sure master is up (sometimes the above condition is empty as master is in fact not working..."
      shell: "sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null || mkdir -p /etc/containerd && sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null"
      notify:
      - Restart containerd
      tags:
      - docker

    # https://serverfault.com/questions/1084454/offline-installation-of-kubernetes-fails-when-using-containerd-as-a-cri
    - name: Make sure containerd sandbox_image does not pull img from outside to avoid proxy issues
      lineinfile:
        dest: /etc/containerd/config.toml
        regexp: '^(.*)sandbox_image = "registry.k8s.io/pause(.*)$'
        line: '\1sandbox_image = "{{ images_repo | default ("registry.k8s.io") }}/pause\2"'
        backrefs: yes
      notify:
      - Restart containerd
      tags:
      - docker

    - name: Make sure containerd snapshotter is the desired one
      lineinfile:
        dest: /etc/containerd/config.toml
        regexp: '^(.*)snapshotter = .*$'
        line: '\1snapshotter = "{{ containerd.snapshotter | default ("overlayfs") }}"'
        backrefs: yes
      when:
      - containerd is defined
      - containerd.snapshotter is defined
      notify:
      - Restart containerd
      tags:
      - docker

    when:
    - ansible_os_family == "Debian" or ( ansible_os_family == "RedHat" and old_docker is undefined )
    ## END of Debian/Ubuntu block

  #- name: Use json-file docker logging driver
  #  lineinfile:
  #    dest: /etc/sysconfig/docker
  #    regexp: '^OPTIONS='
  #    line: "OPTIONS='--selinux-enabled --log-driver=json-file --signature-verification=false'"
  #  notify:
  #  - Restart docker
  #  tags:
  #  - docker

  ## END BLOCK WITH CONDITION
  when: ( docker_setup is defined and docker_setup=="force" ) or
        ( (docker_setup is not defined or docker_setup=="auto" ) and docker_result is failed )

#- name: Use overlay docker storage driver
#  lineinfile:
#    dest: /etc/sysconfig/docker-storage
#    regexp: '^DOCKER_STORAGE_OPTIONS='
#    line: 'DOCKER_STORAGE_OPTIONS="--storage-driver=overlay"'
#  notify:
#  - Restart docker
#  tags:
#  - docker

- name: Flush handlers like docker-storage-setup, docker, etc
  meta: flush_handlers
  tags:
  - docker

- name: check docker is running
  command: 'docker info'
  tags:
  - check_docker
  - docker
  changed_when: false

- name: check docker hello world - test 2/2 # It will not work if there is no internet connection
  shell: docker run --rm -i hello-world | awk '/Hello/ {print $1}'
  register: command_result
  failed_when: command_result.stdout != "Hello"
  tags:
  - check_docker
  - docker
  changed_when: false
  when:
  - images_repo is not defined

- name: check docker {{images_repo}}/hello world - test 2/2 # It will not work if there is no internet connection
  shell: docker run --rm -i {{images_repo}}/hello-world | awk '/Hello/ {print $1}'
  register: command_result
  failed_when: command_result.stdout != "Hello"
  tags:
  - check_docker
  - docker
  changed_when: false
  when:
  - images_repo is defined

# Ideally, to ensure there is no x509 certificate error like:
#' docker pull gcr.io/google_containers/kube-apiserver-amd64:v1.7.2
#Trying to pull repository gcr.io/google_containers/kube-apiserver-amd64 ...
#Get https://gcr.io/v1/_ping: x509: certificate signed by unknown authority '
# yum check-update ca-certificates; (($?==100)) && yum update ca-certificates || yum reinstall ca-certificates
# update-ca-trust extract
